#!/usr/bin/env node

/**
 * Init environment variable.
 */
let BUILD_VERSION = process.env.NODE_ENV;
if (!BUILD_VERSION) {
  process.env.NODE_ENV = "default";
  BUILD_VERSION = "default";
}
let ENV_VARIABLE = require("../env/" + BUILD_VERSION);
(() => {
  const _ENV = process.env;
  for (const key in ENV_VARIABLE) {
    if (ENV_VARIABLE.hasOwnProperty(key)) {
      _ENV[key] = ENV_VARIABLE[key];
    }
  }
})();


//var path = require('path');
var fs = require('fs');
let HTTPS_ENABLE = false;
if (process.env.CERTIFICATE) {
  try {
    fs.accessSync(process.env.CERTIFICATE, fs.constants.R_OK);
    if (process.env.PRIVATE_KEY) {
      try {
        fs.accessSync(process.env.PRIVATE_KEY, fs.constants.R_OK);
        process.env.HTTPS_ENABLE = true;
        HTTPS_ENABLE = process.env.HTTPS_ENABLE;
      } catch (err) {
        console.error('Private key no access!');
      }
    }
  } catch (err) {
    console.error('Certificate file no access!');
  }
}

/**
 * Module dependencies.
 */

try {
  var app = require('../dist/app');
} catch (e) {
  console.error("Error while starting. Error: \n", e);
  return;
}

var debug = require('debug')('bot-www-eating:server');

console.log(JSON.stringify(ENV_VARIABLE));

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

if (HTTPS_ENABLE) {
  var http = require("https");
  const httpsOptions = {
    key: fs.readFileSync(process.env.PRIVATE_KEY),
    cert: fs.readFileSync(process.env.CERTIFICATE)
  }
  var server = http.createServer(httpsOptions, app)
} else {
  var http = require('http');
  var server = http.createServer(app);
}

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
